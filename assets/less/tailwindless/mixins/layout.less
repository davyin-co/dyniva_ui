// 单个值
.position-single(@nameSuffix, @size, @properties, @isMinus: false) when (length(@properties) = 1){
  @selector: if(@isMinus, ~'-@{properties}-@{nameSuffix}', ~'@{properties}-@{nameSuffix}');

  .@{selector} {
    @{properties}: if(@isMinus, @size * -1, @size);
  }
}
// 多个值
.position-multiple(@nameSuffix, @size, @name, @properties, @isMinus: false) when (length(@properties) > 1){
  @selector: if(@isMinus, ~'-inset-@{name}-@{nameSuffix}', ~'inset-@{name}-@{nameSuffix}');

  .@{selector} {
    each(@properties,.(@property) {
      @{property}: if(@isMinus, @size * -1, @size);
    })
  }
}
// 生成负的
.position-minus(@nameSuffix, @size, @useMinus) when (@useMinus) {
  each(#table.direction-abbreviation(), .(@vDirection, @kDirection){

    .position-single(@nameSuffix, @size, @vDirection, @isMinus: true);
    .position-multiple(@nameSuffix, @size, @kDirection, @vDirection, @isMinus: true);
  })

  .-inset-@{nameSuffix} {
    left: @size * -1;
    right: @size * -1;
    bottom: @size * -1;
    top: @size * -1;
  }
}
// base
.position(@nameSuffix, @size) {
  each(#table.direction-abbreviation(), .(@vDirection, @kDirection){

    .position-single(@nameSuffix, @size, @vDirection, @isMinus: false);
    .position-multiple(@nameSuffix, @size, @kDirection, @vDirection, @isMinus: false);
  })

  .inset-@{nameSuffix} {
    left: @size;
    right: @size;
    bottom: @size;
    top: @size;
  }

  // auto和0的时候不生成负的类
  @useMinus: if((@nameSuffix = auto) or (@nameSuffix = 0), false, true);
  .position-minus(@nameSuffix, @size, @useMinus);
}

.z-index(@name, @size: @name) {
  .z-@{name}{
    z-index: @size;
  }
  
}
.z-index-hover(@name, @size: @name) {
  .hover:hover .hover\:z-@{name},
  .hover\:z-@{name}:hover{
    z-index: @size;
  }
}
